package cn.vfunding.vfunding.plat.mq.useration.service.impl;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;

import cn.vfunding.common.framework.utils.beans.EmptyUtil;
import cn.vfunding.common.framework.utils.beans.EncryptionUtil;
import cn.vfunding.vfunding.biz.account.model.AccountRecharge;
import cn.vfunding.vfunding.biz.system.service.IJmsLogService;
import cn.vfunding.vfunding.biz.thirdplat.model.ThirdRelationship;
import cn.vfunding.vfunding.biz.thirdplat.service.IThirdRelationshipService;
import cn.vfunding.vfunding.common.module.activemq.message.afteraction.AfterActionMessage;

import com.alibaba.fastjson.JSON;

/**
 * 用户成功投资后相关业务处理服务类
 * 
 * @author liuyijun
 * 
 */
@Component
public class RechargeActionService {

	/**
	 * 日志对象，slf4j下的对象
	 */
	Logger logger = LoggerFactory.getLogger("actionlog");

	@Autowired
	private IThirdRelationshipService thirdRelationshipService;

	@Autowired
	private UserActionSynchroDataService synchroDataService;

	@Autowired
	private IJmsLogService mapper;

	@Async
	public void doUserRecharge(AfterActionMessage msg) {
			try {
				Integer r = Integer.parseInt(msg.getMethodReturn().toString());
				AccountRecharge rec = JSON.parseObject(
						msg.getMethodArgs()[0].toString(),
						AccountRecharge.class);
				if (r > 0 && rec.getStatus().intValue() == 1) {
					// 充值成功后第三方数据同步
					this.doUserRechargeBiz(rec, msg.getActionName());
				} else if (r > 0 && rec.getStatus().intValue() == 4) {
					logger.info("*****[system userId:" + rec.getUserId()
							+ " 充值(tradeNo=" + rec.getTradeNo() + ") 状态等待无需处理");
				} else {
					logger.info("*****[system userId:" + rec.getUserId()
							+ " 充值(tradeNo=" + rec.getTradeNo() + ") 失败");
				}
				JmsLogUtil.doLog(mapper, msg.getMessageId(), true);
				logger.info("*****[system userId:" + rec.getUserId()
						+ " 充值(tradeNo=" + rec.getTradeNo() + ")MQ消息处理成功");
			} catch (Exception e) {
				logger.error(e.getMessage());
				logger.error(e.getStackTrace().toString());
				logger.error(e.getMessage());
				JmsLogUtil.doLog(mapper, msg.getMessageId(), false);
			}

	}

	private void doUserRechargeBiz(AccountRecharge rec, String actionName) {
		logger.info("*****[cjd " + "userId:" + rec.getUserId() + " 余额同步 开始]");
		// 财经道余额同步
		Integer userId = rec.getUserId();
		ThirdRelationship ship = this.thirdRelationshipService
				.selectByUserIdType(userId, 1);
		if (EmptyUtil.isNotEmpty(ship)) {
			synchroDataService.doSynchroData(rec,
					"/cjdUserAction/userRecharge", actionName, "cjd", userId);
		} else {
			logger.info("*****[system " + "userId:" + rec.getUserId()
					+ " 余额同步 失败]:[不属于财经道]");
		}
		logger.info("*****[cjd " + "userId:" + rec.getUserId() + " 余额同步 结束]");
	}

	public static void main(String[] args) {
		String r = "39897234D93A07466452245B15C8816313644E144EA16D1C4298929E50AC088158BFDC826E30120CB3EAA9FCF0C78549E48D8B84A13323752FFCD804A7AA8606B012A7887C0394BF1D8BEAE84B22E1A5DF8CC880E4C09CB46A4AD96B1B5D8CAC1B1BD73A7B3F3563743A8987BCF4E5691A56DFBB7A4C62CF4E69453F690BE21DE69417DA198535209CA11576207CE2AE90405E7B8961DBDFA3ADE04077DB2E28C7F3B256EC798C158BEA043920F7BD89096147B30E3B4C11A408B0D14C5E720882DE3AB51C707EF0E1012C634722721F6961B667E4C3DCFDAFB8BEE66FFC91006E55824184F9401D616F5A60226364D0200462EDF0962DC55A2A83ED6B97EC3C6E06061D3E8FC88CBE78BF5C48F4F028896E2EA690791093B7400279DCCA12E6DD3230E86270E8A891BCA94CAEDE8323F4C2CD1BC27D7F98F93A9716268DA8B9933D7C3D12BC93A69C9E5ED1DD3F05E1977DF9D54188901EB92CFAD8B599002F4E43B295A9CFA33874E10DE1DD29300B8DB5E16F7E2B052C8B3653A157EC60CA64D853979604BD06860618CE5F360611E9B4DD6F784A3EA6DFFB2AC22817EF074FCE637D7D67B7D581F5999E411B55CB5451B5E49042B6BFF4C82A67CB1B1EA2C6834072B0E5DD4B41DBB8B5F01E947880EEDC773BA15799282B4BAADED348EB3641F15AF4E9AE884530E6CC92E20B944B069EEA0B04FE68AE0221B2CCAED0D80EA74C9AF317DD6E4969EC891C10A8DFFE624195DD46E796B412A8D919F473056E39AC37B3F3736AF654E791DF81548ED51E909DF48A1E0F2ECC38E27CF662E038FF6C59AC4A697A07D5AA43505E86C589F23F20BD05E9C2334F6224230B1BC37AD620338909991E09EE6DABC0ED371B10FBDA0CA85346414E921E06F106D56216A798D4E2EE91053CD8A82D3CAF28BEF845F28ACC40830A711C56FB7C0A84EEBAAD7A5220C0E99DA8445DBF64E051DF8679065E713232D94080528FBDEA8BEF1885EC51309B53BDB920DE1EE31FAAD7AE76C0D4D2651F049EBF189B40F674FBA8445DBF64E051DFDBF76714A93F415364D853979604BD06860618CE5F360611E9B4DD6F784A3EA6A52842C69570362E24DF055B334355A7E4A1694F06DDD6568D105EB7CD8741EEECCE51FB0901C176C553C7BB5D7942FBC709D75C2BB2EC5BB0720F00F9D6744D775225F4ECC5F8F89E16840897D12D12BDC4B6107D25D1569EBF189B40F674FBA8445DBF64E051DFBDA543C8AE0CE29DC995A365FE274A321EEF69ABE8E8E5F08C74122E825A18E3611BAC2F169891CDC594AD472377ECD303BF1AEB632C0129C285E3186394E526D2F1FD8FD8C1CBD77B777817D69741263CA711D64344399284F3F9FC14B7B8ECA2C26EE19CC3280CCABB3214F583C65EDB60D5F43E49CFA6AEAA2088DB769C97FC5C864D675EB0D06A2DBF1A2B3CFA46A8445DBF64E051DF66FA3734315F2CF187971A1B73FD1F212F66849EA1597ADF4CF373208299C71BD818636B230BBF3E3D804CA535AF4E391ADABA616CC01B74A49141360157CB516E0C12D2143B0849AC32FFA8A74B99B735EE24FE12856FE4550A0D041818986DDFD98E0D755DD6A9398E2BCEAF8F2ED4EC3A54AB68A57A88985D93208E780027D98592CCAA42B4E576307B59AA21880262B1F3352A38F7A6279863DCBA7BFB5940658E0881DF6516B99117C1C1F4F3FFBB6CCDCF371FF52FCDAFAB2A1AE8623C9264AEB11B2C950BAF0A6CEC80E077265D220844012F48255A9E90C478C215A38A3A5B07EA7BE48842A25480B40C944FFD09D308D6F0702E4570AAFB09157CF573F60C7CD27134765CB49DFF4B11F025DC1BE7B49E544B4FED6E994D6A8339E56D6D88EF92524FFBDC1BE7B49E544B4FA3ADE04077DB2E28C7F3B256EC798C159ADFD03CDEF860B920A3B4A0FB477CDF5514DBB3B4097771549272B5CCF33A2D58455AC925F82583117AA0EF001A1EDBC7245E18CFA1FA8FBEECCD42152E5A95441D380148E6EC400164FA77C2ED4BB09E55ECAE4BE71EA875DDB69CD6F8F524430BA683B5B011B075DDB69CD6F8F52476307B59AA2188026DF00A01C038DFA50857CC4CFB2EEC76E7DB38C3FC8F2C25E55BC251FAF17E5B7E6E4FA1F056EF139C1393A00F04B220961C572D33F7346E4617FB0F9729FD2182A23886DBAB716D863023B0C74000B5CA82A9E1CF59BAD1287CB8FF6C388BC34E2AC06291995848C5E1F9B38ECCDB0C69338B3EA17338CF8B554B0D2739892690F32E5A2A17745F226401BE26CEBC60736F9738236D53F97DE4214635CD3C0F";

		String a = EncryptionUtil.decrypt(r);
		System.out.println(a);
	}

}
